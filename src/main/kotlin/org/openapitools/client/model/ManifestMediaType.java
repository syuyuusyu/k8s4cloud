/*
 * docker registry
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ManifestMediaType
 */
@JsonAdapter(ManifestMediaType.Adapter.class)
public enum ManifestMediaType {
  
  DISTRIBUTION_MANIFEST_V1_JSON("application/vnd.docker.distribution.manifest.v1+json"),
  
  DISTRIBUTION_MANIFEST_V2_JSON("application/vnd.docker.distribution.manifest.v2+json"),
  
  DISTRIBUTION_MANIFEST_LIST_V2_JSON("application/vnd.docker.distribution.manifest.list.v2+json"),
  
  CONTAINER_IMAGE_V1_JSON("application/vnd.docker.container.image.v1+json"),
  
  IMAGE_ROOTFS_DIFF_TAR_GZIP("application/vnd.docker.image.rootfs.diff.tar.gzip"),
  
  IMAGE_ROOTFS_FOREIGN_DIFF_TAR_GZIP("application/vnd.docker.image.rootfs.foreign.diff.tar.gzip");

  private String value;

  ManifestMediaType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ManifestMediaType fromValue(String value) {
    for (ManifestMediaType b : ManifestMediaType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ManifestMediaType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ManifestMediaType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ManifestMediaType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ManifestMediaType.fromValue(value);
    }
  }
}

