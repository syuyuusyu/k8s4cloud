/*
 * docker registry
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.NodeMetricsListMetadata;
import org.openapitools.client.model.NodeMetricsListUsage;

/**
 * NodeMetricsListItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-03-09T13:45:19.880843+08:00[Asia/Shanghai]")
public class NodeMetricsListItems {
  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private NodeMetricsListMetadata metadata;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_WINDOW = "window";
  @SerializedName(SERIALIZED_NAME_WINDOW)
  private String window;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private NodeMetricsListUsage usage;


  public NodeMetricsListItems metadata(NodeMetricsListMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeMetricsListMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(NodeMetricsListMetadata metadata) {
    this.metadata = metadata;
  }


  public NodeMetricsListItems timestamp(String timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public NodeMetricsListItems window(String window) {
    
    this.window = window;
    return this;
  }

   /**
   * Get window
   * @return window
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWindow() {
    return window;
  }


  public void setWindow(String window) {
    this.window = window;
  }


  public NodeMetricsListItems usage(NodeMetricsListUsage usage) {
    
    this.usage = usage;
    return this;
  }

   /**
   * Get usage
   * @return usage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NodeMetricsListUsage getUsage() {
    return usage;
  }


  public void setUsage(NodeMetricsListUsage usage) {
    this.usage = usage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeMetricsListItems nodeMetricsListItems = (NodeMetricsListItems) o;
    return Objects.equals(this.metadata, nodeMetricsListItems.metadata) &&
        Objects.equals(this.timestamp, nodeMetricsListItems.timestamp) &&
        Objects.equals(this.window, nodeMetricsListItems.window) &&
        Objects.equals(this.usage, nodeMetricsListItems.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, timestamp, window, usage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeMetricsListItems {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

